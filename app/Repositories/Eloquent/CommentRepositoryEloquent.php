<?php

namespace App\Repositories\Eloquent;

use App\Models\Post;
use App\Models\Video;
use Illuminate\Support\Facades\Auth;
use League\HTMLToMarkdown\HtmlConverter;
use Parsedown;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Contracts\Repositories\CommentRepository;
use App\Models\Comment;
use App\Validators\CommentValidator;
use XCasts\Notifications\Mention;

/**
 * Class CommentRepositoryEloquent
 * @package namespace App\Repositories\Eloquent;
 */
class CommentRepositoryEloquent extends BaseRepository implements CommentRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Comment::class;
    }

    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {
        $this->pushCriteria(app(RequestCriteria::class));
    }

    public function create(array $attributes)
    {
        // 检查是否重复添加
        if ($this->isDuplicateReply($attributes)) {
            throw new \RuntimeException('请不要发布重复内容。');
        }

        $mentionParser = new Mention();
        $attributes['user_id'] = Auth::id();
        $attributes['origin_content'] = $attributes['content'];
        $attributes['content'] = $mentionParser->parse($attributes['content']);
        $attributes['content'] = (new Parsedown())->setBreaksEnabled(true)->text($attributes['content']);

        $comment = parent::create($attributes); // TODO: Change the autogenerated stub
        if (!$comment) {
            throw new \RuntimeException('回复失败');
        }

        Auth::user()->increment('reply_count', 1);

        switch ($attributes['type']) {
            case 'video':
                $video = Video::find($attributes['relation_id']);
                app('XCasts\Notifications\Notifier')->newCommentNotifyForVideo(Auth::user(), $mentionParser, $video, $comment);
                break;
            case 'blog':
                $post = Post::find($attributes['relation_id']);
                app('XCasts\Notifications\Notifier')->newCommentNotifyForPost(Auth::user(), $mentionParser, $post, $comment);
                break;
        }


        return $comment;
    }

    /**
     * @param array $data
     * @return bool
     */
    public function isDuplicateReply(array $data)
    {
        $lastComment = Comment::where('user_id', Auth::id())
            ->where('relation_id', $data['relation_id'])
            ->orderBy('id', 'desc')
            ->first();
        return $lastComment instanceof Comment && strcmp($lastComment->origin_content, $data['content']) === 0;
    }

    public function all($columns = ['*'])
    {
        $lists = parent::all($columns);

        //foreach ($lists as &$list) {
        //    $list->content = $parseDown->text($list->content);
        //}

        return $lists;
    }
}
