<?php

namespace App\Repositories\Eloquent;

use App\Models\Topic;
use Auth;
use Parsedown;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Contracts\Repositories\PostRepository;
use App\Models\Post;
use App\Validators\PostValidator;

/**
 * Class PostRepositoryEloquent
 * @package namespace App\Repositories\Eloquent;
 */
class PostRepositoryEloquent extends BaseRepository implements PostRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Post::class;
    }

    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {
        $this->pushCriteria(app(RequestCriteria::class));
    }

    public function create(array $attributes)
    {
        // 检查是否冲突添加
        if ($this->isDuplicate($attributes)) {
            throw new \RuntimeException('相同post已经存在');
        }

        if (isset($attributes['content'])) {
            $attributes['origin_content'] = $attributes['content'];
            $attributes['content'] = (new Parsedown())->setBreaksEnabled(true)->text($attributes['content']);
        }

        $attributes['user_id'] = Auth::id();

        $post = parent::create($attributes); // TODO: Change the autogenerated stub
        if (!$post) {
            throw new \RuntimeException('创建post失败');
        }

        return $post;
    }

    public function update(array $attributes, $id)
    {
        if (isset($attributes['origin_content'])) {
            $attributes['content'] = (new Parsedown())->setBreaksEnabled(true)->text($attributes['origin_content']);
        }

        $attributes['user_id'] = Auth::id();

        $post = parent::update($attributes, $id);
        if (!$post) {
            throw new \RuntimeException('更新post失败');
        }

        return $post;
    }

    /**
     * @param array $data
     * @return bool
     */
    public function isDuplicate(array $data)
    {
        $lastTopic = Post::where('user_id', Auth::id())
            ->orderBy('id', 'desc')
            ->first();
        return $lastTopic instanceof Topic && strcmp($lastTopic->title, $data['title']) === 0;
    }

    public function increment($field, $count=1)
    {
        return Post::increment($field, $count);
    }
}
