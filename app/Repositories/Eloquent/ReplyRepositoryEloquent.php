<?php

namespace App\Repositories\Eloquent;

use App\Models\Topic;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Parsedown;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Contracts\Repositories\ReplyRepository;
use App\Models\Reply;
use App\Validators\ReplyValidator;
use App\XCasts\Notifications\Mention;

/**
 * Class ReplyRepositoryEloquent
 * @package namespace App\Repositories\Eloquent;
 */
class ReplyRepositoryEloquent extends BaseRepository implements ReplyRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Reply::class;
    }

    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {
        $this->pushCriteria(app(RequestCriteria::class));
    }

    public function create(array $attributes)
    {
        // 检查是否冲突添加
        if ($this->isDuplicateReply($attributes)) {
            throw new \RuntimeException('请不要发布重复内容。');
        }

        $attributes['user_id'] = Auth::id();
        $attributes['body'] = (new Mention())->parse($attributes['body']);

        $attributes['origin_body'] = $attributes['body'];
        //TODO markdown 做下封装处理
        $attributes['body'] = (new Parsedown())->setBreaksEnabled(true)->text($attributes['body']);

        $reply = parent::create($attributes); // TODO: Change the autogenerated stub
        if (!$reply) {
            throw new \RuntimeException('创建topic失败');
        }

        // Add the reply user
        $topic = Topic::find($attributes['topic_id']);
        $topic->last_reply_user_id = Auth::id();
        $topic->reply_count++;
        $topic->updated_at = Carbon::now()->toDateTimeString();
        $topic->save();

        Auth::user()->increment('reply_count', 1);

        // TODO 通知相关人

        return $reply;
    }

    /**
     * @param array $data
     * @return bool
     */
    public function isDuplicateReply(array $data)
    {
        $lastReply = Reply::where('user_id', Auth::id())
                            ->where('topic_id', $data['topic_id'])
                            ->orderBy('id', 'desc')
                            ->first();
        return count($lastReply) && strcmp($lastReply->origin_body, $data['body']) === 0;
    }
}
